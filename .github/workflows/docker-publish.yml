name: Publish Docker image (GHCR)

on:
  workflow_run:
    workflows: ["SurviveOS-branding build"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      dummy:
        description: "Manual run trigger"
        required: false
        default: "manual"

jobs:
  publish-image:
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      packages: write

    steps:
    - name: Checkout repo (for Dockerfile & scripts)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - id: dl
      name: Download kiwix-tools artifact
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ github.event.workflow_run.id }}

    - name: Prepare build context
      env:
        ART_DIR: ${{ steps.dl.outputs.download-path }}
      run: |
        mkdir buildctx
        # Artifact comes in a folder; find the zip and extract
        ART="$ART_DIR"
        echo "Artifact directory: $ART"
        echo "Listing artifact contents for debug:"; ls -R "$ART" | head -n 100 || true
        # If the artifact is a zip archive, extract it first
        ZIP=$(find "$ART" -maxdepth 1 -name "*.zip" -type f | head -n1 || true)
        if [ -n "$ZIP" ]; then
          echo "Found zip artifact: $ZIP -> extracting"
          mkdir extracted && unzip -q "$ZIP" -d extracted
          ART="$(pwd)/extracted"
        fi

        SERVE=$(find "$ART" -name kiwix-serve -type f | head -n1)
        MANAGE=$(find "$ART" -name kiwix-manage -type f | head -n1)
        if [ -z "$SERVE" ] || [ -z "$MANAGE" ]; then echo "Branded binaries not found in artifact" >&2; exit 1; fi
        cp "$SERVE" buildctx/kiwix-serve
        cp "$MANAGE" buildctx/kiwix-manage
        # copy supporting files needed for image
        cp make-library.sh buildctx/
        cp -a zims buildctx/zims || true
        # create minimal Dockerfile
        cat > buildctx/Dockerfile <<'EOF'
        FROM ubuntu:22.04

        # Add Kiwix PPA (provides libzim9 & libkiwix14 runtime deps)
        RUN apt-get update && \
            apt-get install -y --no-install-recommends curl gnupg dirmngr ca-certificates && \
            mkdir -p /etc/apt/keyrings && \
            curl -fsSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x012AEA4FFD0486EA2F22C80C91262FF81F6F5758" | \
              gpg --dearmor -o /etc/apt/keyrings/kiwix-archive.gpg && \
            echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/kiwix-archive.gpg] http://ppa.launchpad.net/kiwixteam/release/ubuntu jammy main" > /etc/apt/sources.list.d/kiwix.list && \
            apt-get update && DEBIAN_FRONTEND=noninteractive \
            apt-get install -y --no-install-recommends libstdc++6 libzim9 libkiwix14 libmagic1 zlib1g && \
            rm -rf /var/lib/apt/lists/*

        COPY kiwix-serve /usr/local/bin/
        COPY kiwix-manage /usr/local/bin/
        COPY make-library.sh /usr/local/bin/
        RUN chmod +x /usr/local/bin/make-library.sh

        ENTRYPOINT ["kiwix-serve"]
        EOF

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: buildctx
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/surviveos-hub:latest
          ghcr.io/${{ github.repository_owner }}/surviveos-hub:sha-${{ github.event.workflow_run.head_sha }} 
      env:
        ART_DIR: ${{ steps.dl.outputs.download-path }} 